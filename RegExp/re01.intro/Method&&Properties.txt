Certainly! Here is a full list of the methods and properties available for working with regular expressions in JavaScript:

Regular Expression Methods:
1. exec(): Executes a search for a match in a specified string and returns an array containing the matched results or null if no match is found.
2. test(): Tests for a match in a specified string and returns true or false.
3. match(): Retrieves the matches when matching a string against a regular expression. It returns an array of matches or null if no match is found.
4. search(): Executes a search for a match between a regular expression and a specified string. It returns the index of the first match or -1 if no match is found.
5. replace(): Searches a string using a regular expression pattern and replaces matches with a replacement string. It returns a new string with the replacements.
6. split(): Splits a string into an array of substrings based on a specified separator (which can be a regular expression). It returns an array of substrings.
7. toString(): Returns a string representation of the regular expression.

Regular Expression Properties:
1. source: Retrieves the text of the regular expression pattern.
2. global: Indicates whether the "g" flag is set (global search).
3. ignoreCase: Indicates whether the "i" flag is set (case-insensitive search).
4. multiline: Indicates whether the "m" flag is set (multiline search).
5. lastIndex: Used to set or get the index at which the next search will start.

These methods and properties provide a wide range of functionalities for working with regular expressions in JavaScript. By utilizing them effectively, you can search, match, replace, split, and perform various operations on strings based on complex patterns.

Remember to refer to the JavaScript documentation or specific resources for more detailed information on each method and property, as well as additional examples and use cases.